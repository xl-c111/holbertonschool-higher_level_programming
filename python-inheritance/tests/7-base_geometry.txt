The ``BaseGeometry`` class
==========================

Using ``BaseGeometry``
----------------------

First import ``BaseGeometry`` from the ``7-base_geometry`` file:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Create a BaseGeometry object:

    >>> bg = BaseGeometry()

Test - call area() (should raise an Exception):

    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented

Test - integer_validator with a valid integer:

    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

Test - integer_validator with a non-integer value (string):

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test - integer_validator with zero:

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

Test - integer_validator with a negative value:

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

Test - integer_validator with a tuple:

    >>> try:
    ...     bg.integer_validator("age", (4,))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

Test - integer_validator with a list:

    >>> try:
    ...     bg.integer_validator("age", [3])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

Test - integer_validator with a boolean:

    >>> try:
    ...     bg.integer_validator("age", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

Test - integer_validator with a set:

    >>> try:
    ...     bg.integer_validator("age", {3, 4})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

Test - integer_validator with None:

    >>> try:
    ...     bg.integer_validator("age", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer
